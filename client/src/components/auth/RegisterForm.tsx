import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\nimport { Label } from '../ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '../ui/card';\nimport { Alert, AlertDescription } from '../ui/alert';\nimport { Icons } from '../ui/icons';\nimport { Link } from 'wouter';\n\nconst registerSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string()\n    .min(8, 'Password must be at least 8 characters')\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]+$/,\n      'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'\n    ),\n  confirmPassword: z.string(),\n  firstName: z.string()\n    .min(2, 'First name must be at least 2 characters')\n    .max(50, 'First name cannot exceed 50 characters'),\n  lastName: z.string()\n    .min(2, 'Last name must be at least 2 characters')\n    .max(50, 'Last name cannot exceed 50 characters'),\n  country: z.string().optional()\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: ['confirmPassword'],\n});\n\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\ninterface RegisterFormProps {\n  onSuccess?: (user: any, tokens: any) => void;\n  redirectTo?: string;\n}\n\nexport function RegisterForm({ onSuccess, redirectTo = '/dashboard' }: RegisterFormProps) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n      confirmPassword: '',\n      firstName: '',\n      lastName: '',\n      country: ''\n    }\n  });\n\n  const onSubmit = async (data: RegisterFormData) => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        if (result.errors) {\n          const errorMessages = result.errors.map((err: any) => err.message).join(', ');\n          throw new Error(errorMessages);\n        }\n        throw new Error(result.message || 'Registration failed');\n      }\n\n      if (result.success) {\n        setSuccess(result.message);\n        \n        // Store tokens\n        localStorage.setItem('accessToken', result.tokens.accessToken);\n        localStorage.setItem('refreshToken', result.tokens.refreshToken);\n        \n        // Store user data\n        localStorage.setItem('user', JSON.stringify(result.user));\n        \n        // Redirect after 2 seconds\n        setTimeout(() => {\n          if (onSuccess) {\n            onSuccess(result.user, result.tokens);\n          } else {\n            window.location.href = result.user.role === 'admin' ? '/admin/dashboard' : redirectTo;\n          }\n        }, 2000);\n      } else {\n        setError(result.message || 'Registration failed');\n      }\n    } catch (err) {\n      console.error('Registration error:', err);\n      setError(err instanceof Error ? err.message : 'An error occurred during registration');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader className=\"space-y-1\">\n        <CardTitle className=\"text-2xl font-bold text-center\">Create Account</CardTitle>\n        <CardDescription className=\"text-center\">\n          Join BlockTrade to start trading\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <Icons.AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {success && (\n            <Alert className=\"border-green-200 bg-green-50 text-green-800\">\n              <Icons.CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <AlertDescription>{success}</AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"firstName\">First Name</Label>\n              <Input\n                id=\"firstName\"\n                type=\"text\"\n                placeholder=\"John\"\n                {...register('firstName')}\n                autoComplete=\"given-name\"\n              />\n              {errors.firstName && (\n                <p className=\"text-sm text-red-600\">{errors.firstName.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"lastName\">Last Name</Label>\n              <Input\n                id=\"lastName\"\n                type=\"text\"\n                placeholder=\"Doe\"\n                {...register('lastName')}\n                autoComplete=\"family-name\"\n              />\n              {errors.lastName && (\n                <p className=\"text-sm text-red-600\">{errors.lastName.message}</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email Address</Label>\n            <div className=\"relative\">\n              <Icons.Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"your@email.com\"\n                className=\"pl-10\"\n                {...register('email')}\n                autoComplete=\"username email\"\n              />\n            </div>\n            {errors.email && (\n              <p className=\"text-sm text-red-600\">{errors.email.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"country\">Country (Optional)</Label>\n            <Input\n              id=\"country\"\n              type=\"text\"\n              placeholder=\"United States\"\n              {...register('country')}\n              autoComplete=\"country-name\"\n            />\n            {errors.country && (\n              <p className=\"text-sm text-red-600\">{errors.country.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <div className=\"relative\">\n              <Icons.Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                id=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                placeholder=\"••••••••\"\n                className=\"pl-10 pr-10\"\n                {...register('password')}\n                autoComplete=\"new-password\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowPassword(!showPassword)}\n                tabIndex={-1}\n              >\n                {showPassword ? (\n                  <Icons.EyeOff className=\"h-4 w-4 text-gray-400\" />\n                ) : (\n                  <Icons.Eye className=\"h-4 w-4 text-gray-400\" />\n                )}\n              </Button>\n            </div>\n            {errors.password && (\n              <p className=\"text-sm text-red-600\">{errors.password.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n            <div className=\"relative\">\n              <Icons.Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                id=\"confirmPassword\"\n                type={showConfirmPassword ? 'text' : 'password'}\n                placeholder=\"••••••••\"\n                className=\"pl-10 pr-10\"\n                {...register('confirmPassword')}\n                autoComplete=\"new-password\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                tabIndex={-1}\n              >\n                {showConfirmPassword ? (\n                  <Icons.EyeOff className=\"h-4 w-4 text-gray-400\" />\n                ) : (\n                  <Icons.Eye className=\"h-4 w-4 text-gray-400\" />\n                )}\n              </Button>\n            </div>\n            {errors.confirmPassword && (\n              <p className=\"text-sm text-red-600\">{errors.confirmPassword.message}</p>\n            )}\n          </div>\n\n          <div className=\"text-xs text-gray-600\">\n            Password must contain:\n            <ul className=\"list-disc list-inside mt-1 space-y-1\">\n              <li>At least 8 characters</li>\n              <li>One uppercase letter</li>\n              <li>One lowercase letter</li>\n              <li>One number</li>\n              <li>One special character (@$!%*?&)</li>\n            </ul>\n          </div>\n\n          <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n            {loading ? (\n              <>\n                <Icons.Spinner className=\"mr-2 h-4 w-4 animate-spin\" />\n                Creating account...\n              </>\n            ) : (\n              'Create Account'\n            )}\n          </Button>\n        </form>\n      </CardContent>\n      <CardFooter>\n        <p className=\"text-center text-sm text-gray-600 w-full\">\n          Already have an account?{' '}\n          <Link\n            href=\"/auth/login\"\n            className=\"text-blue-600 hover:text-blue-500 hover:underline font-medium\"\n          >\n            Sign in\n          </Link>\n        </p>\n      </CardFooter>\n    </Card>\n  );\n}"