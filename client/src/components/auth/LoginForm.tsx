import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\nimport { Label } from '../ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '../ui/card';\nimport { Alert, AlertDescription } from '../ui/alert';\nimport { Checkbox } from '../ui/checkbox';\nimport { Icons } from '../ui/icons';\nimport { Link } from 'wouter';\n\nconst loginSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(1, 'Password is required'),\n  rememberMe: z.boolean().optional()\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\ninterface LoginFormProps {\n  onSuccess?: (user: any, tokens: any) => void;\n  redirectTo?: string;\n}\n\nexport function LoginForm({ onSuccess, redirectTo = '/dashboard' }: LoginFormProps) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    watch\n  } = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n      rememberMe: false\n    }\n  });\n\n  const rememberMe = watch('rememberMe');\n\n  const onSubmit = async (data: LoginFormData) => {\n    setLoading(true);\n    setError('');\n\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.message || 'Login failed');\n      }\n\n      if (result.success) {\n        // Store tokens\n        localStorage.setItem('accessToken', result.tokens.accessToken);\n        if (data.rememberMe) {\n          localStorage.setItem('refreshToken', result.tokens.refreshToken);\n        }\n        \n        // Store user data\n        localStorage.setItem('user', JSON.stringify(result.user));\n        \n        if (onSuccess) {\n          onSuccess(result.user, result.tokens);\n        } else {\n          // Default redirect behavior\n          window.location.href = result.user.role === 'admin' ? '/admin/dashboard' : redirectTo;\n        }\n      } else {\n        setError(result.message || 'Login failed');\n      }\n    } catch (err) {\n      console.error('Login error:', err);\n      setError(err instanceof Error ? err.message : 'An error occurred during login');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader className=\"space-y-1\">\n        <CardTitle className=\"text-2xl font-bold text-center\">Welcome Back</CardTitle>\n        <CardDescription className=\"text-center\">\n          Sign in to continue to BlockTrade\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email Address</Label>\n            <div className=\"relative\">\n              <Icons.Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"your@email.com\"\n                className=\"pl-10\"\n                {...register('email')}\n                autoComplete=\"username email\"\n              />\n            </div>\n            {errors.email && (\n              <p className=\"text-sm text-red-600\">{errors.email.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <div className=\"relative\">\n              <Icons.Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                id=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                placeholder=\"••••••••\"\n                className=\"pl-10 pr-10\"\n                {...register('password')}\n                autoComplete=\"current-password\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowPassword(!showPassword)}\n                tabIndex={-1}\n              >\n                {showPassword ? (\n                  <Icons.EyeOff className=\"h-4 w-4 text-gray-400\" />\n                ) : (\n                  <Icons.Eye className=\"h-4 w-4 text-gray-400\" />\n                )}\n              </Button>\n            </div>\n            {errors.password && (\n              <p className=\"text-sm text-red-600\">{errors.password.message}</p>\n            )}\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"rememberMe\"\n                checked={rememberMe}\n                onCheckedChange={(checked) => setValue('rememberMe', !!checked)}\n              />\n              <Label\n                htmlFor=\"rememberMe\"\n                className=\"text-sm font-normal text-gray-600 cursor-pointer\"\n              >\n                Remember me\n              </Label>\n            </div>\n            <Link\n              href=\"/auth/forgot-password\"\n              className=\"text-sm text-blue-600 hover:text-blue-500 hover:underline\"\n            >\n              Forgot password?\n            </Link>\n          </div>\n\n          <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n            {loading ? (\n              <>\n                <Icons.Spinner className=\"mr-2 h-4 w-4 animate-spin\" />\n                Signing in...\n              </>\n            ) : (\n              'Sign In'\n            )}\n          </Button>\n        </form>\n      </CardContent>\n      <CardFooter>\n        <p className=\"text-center text-sm text-gray-600 w-full\">\n          Don't have an account?{' '}\n          <Link\n            href=\"/auth/register\"\n            className=\"text-blue-600 hover:text-blue-500 hover:underline font-medium\"\n          >\n            Create an account\n          </Link>\n        </p>\n      </CardFooter>\n    </Card>\n  );\n}"